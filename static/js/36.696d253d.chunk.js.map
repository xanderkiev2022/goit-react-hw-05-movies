{"version":3,"file":"static/js/36.696d253d.chunk.js","mappings":"oRAEaA,EAAQC,EAAAA,GAAAA,MAAH,iKAQLC,EAASD,EAAAA,GAAAA,OAAH,2WAeNE,EAAOF,EAAAA,GAAAA,KAAH,gD,SCrBF,SAASG,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAiBA,OACE,UAACL,EAAD,CAAMM,SAVa,SAAAC,GACnBA,EAAEC,iBACGJ,IAGLF,EAASE,EAAYK,QACrBJ,EAAe,IAChB,EAGC,WACE,SAACR,EAAD,CAAOa,KAAK,OAAOC,MAAOP,EAAaF,SAjBtB,SAAAK,GACnB,IACMK,EADYL,EAAEM,OAAZF,MACsBG,cAC9BT,EAAeO,EAChB,KAcG,SAACb,EAAD,wBAGL,C,+BCpBc,SAASgB,IAAU,IAAD,EAC/B,GAA8BC,EAAAA,EAAAA,KAAtBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAChB,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAY,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAClD,GAA4BpB,EAAAA,EAAAA,UAAS,IAArC,eAAOqB,EAAP,KAAeC,EAAf,KACA,GAAoCtB,EAAAA,EAAAA,UAAS,GAA7C,eAAOuB,EAAP,KAAmBC,EAAnB,KACMC,GAAWC,EAAAA,EAAAA,MAsCjB,IAxBAC,EAAAA,EAAAA,YAAU,WACe,KAAlBb,EAAOc,QAGZN,EAAU,WACX,GAAE,CAACR,KAEJa,EAAAA,EAAAA,YAAU,WACR,GAAqB,KAAjBR,EAAJ,CAEA,IAAMU,EAAS,mCAAG,WAAM5B,GAAN,qGAEyB6B,EAAAA,EAAAA,IAAkB7B,GAF3C,gBAEN8B,EAFM,EAENA,QAASC,EAFH,EAEGA,YACjBjB,EAAUgB,GACVP,EAAcQ,GACdV,EAAU,YALI,kDAOdW,QAAQC,IAAR,MAPc,0DAAH,sDAWfL,EAAUV,EAbqB,CAchC,GAAE,CAACA,EAAcJ,IAEH,aAAXM,EACF,OACE,iCACE,SAACvB,EAAD,CAAWC,SAvCS,SAAAoC,GACpBA,IAAUhB,IAGA,KAAVgB,GAIJjB,EAAgB,CAAEiB,MAAOA,IACzBpB,EAAU,KAJRA,EAAU,IAKb,IA8BqB,IAAfQ,GACC,8CAEA,SAAC,KAAD,UACGT,EAAOsB,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxB,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAYC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMjB,GAAhD,WACE,SAAC,KAAD,CAAKkB,IAAKJ,EAAW,yCAAqCA,EAArC,KAAsDK,EAAWC,IAAKP,KAC3F,SAAC,KAAD,UAAQA,GAAgB,sBAFuCD,IADjDA,EAOrB,QAMZ,C","sources":["components/SearchBox/SearchBox.styled.jsx","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Input = styled.input`\n  max-width: 200px;\n  border: var(--border);\n  border-radius: 4px;\n  background-color: #2c2d31;\n  color: var(--primary-text-color);\n`;\n\nexport const Button = styled.button`\n  margin-left: 10px;\n  padding: 5px 15px;\n  background-color: var(--accent-color);\n  color: var(--primary-text-color);\n  border: var(--border);\n  border-radius: 4px;\n  font-weight: 700;\n  transition: background-color var(--animation-timing-function);\n  &:hover,\n  &:focus {\n    background-color: var(--accent-color-hover);\n  }\n`;\n\nexport const Form = styled.form`\n  margin-bottom: 15px;\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Button } from './SearchBox.styled';\n\nexport default function SearchBox({ onChange }) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleChange = e => {\n    const { value } = e.target;\n    const normalizedValue = value.toLowerCase();\n    setSearchQuery(normalizedValue);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!searchQuery) {\n      return;\n    }\n    onChange(searchQuery.trim());\n    setSearchQuery('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input type=\"text\" value={searchQuery} onChange={handleChange} />\n      <Button> Search</Button>\n    </Form>\n  );\n}\n\nSearchBox.propTypes = {\n  onChange: PropTypes.func,\n};\n","import { useLocation, useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMoviesbyName } from 'service/moviesApi';\nimport SearchBox from 'components/SearchBox/SearchBox';\nimport { Gallery, GalleryItem, Img, LinkStyled, Title } from '../Home/Home.styled';\nimport { useContextHook } from 'components/Context';\nimport noPicture from '../../images/no_picture.jpg';\n\nexport default function Movies() {\n  const { movies, setMovies } = useContextHook();\n  const [searchParams, setSearchParams] = useSearchParams('');\n  const currentQuery = searchParams.get('query') ?? '';\n  const [status, setStatus] = useState('');\n  const [totalPages, setTotalPages] = useState(1);\n  const location = useLocation();\n\n  const updateQueryString = query => {\n    if (query === currentQuery) {\n      return;\n    }\n    if (query === '') {\n      setMovies([]);\n      return;\n    }\n    setSearchParams({ query: query });\n    setMovies([]);\n  };\n\n  useEffect(() => {\n    if (!movies.length === 0) {\n      return;\n    }\n    setStatus('resolved');\n  }, [movies]);\n\n  useEffect(() => {\n    if (currentQuery === '') return;\n\n    const getMovies = async searchQuery => {\n      try {\n        const { results, total_pages } = await fetchMoviesbyName(searchQuery);\n        setMovies(results);\n        setTotalPages(total_pages);\n        setStatus('resolved');\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    getMovies(currentQuery);\n  }, [currentQuery, setMovies]);\n\n  if (status === 'resolved') {\n    return (\n      <>\n        <SearchBox onChange={updateQueryString} />\n        {totalPages === 0 ? (\n          <h2>No results found</h2>\n        ) : (\n          <Gallery>\n            {movies.map(({ id, title, poster_path }) => {\n              return (\n                <GalleryItem key={id}>\n                  <LinkStyled to={`/movies/${id}`} state={{ from: location }} key={id}>\n                    <Img src={poster_path ? `https://image.tmdb.org/t/p/w300${poster_path} ` : noPicture} alt={title} />\n                    <Title>{title ? title : ' No information'}</Title>\n                  </LinkStyled>\n                </GalleryItem>\n              );\n            })}\n          </Gallery>\n        )}\n      </>\n    );\n  }\n}\n"],"names":["Input","styled","Button","Form","SearchBox","onChange","useState","searchQuery","setSearchQuery","onSubmit","e","preventDefault","trim","type","value","normalizedValue","target","toLowerCase","Movies","useContextHook","movies","setMovies","useSearchParams","searchParams","setSearchParams","currentQuery","get","status","setStatus","totalPages","setTotalPages","location","useLocation","useEffect","length","getMovies","fetchMoviesbyName","results","total_pages","console","log","query","map","id","title","poster_path","to","state","from","src","noPicture","alt"],"sourceRoot":""}